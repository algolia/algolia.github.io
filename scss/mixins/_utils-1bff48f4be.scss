
//---------------------------
//  Bem helper
//---------------------------
@mixin component($component, $element: false, $modifier: false) {
  @if $element !=false and $modifier==false {
    .cm-#{$component}__#{$element} {
      @content
    }
  }
  @if $element !=false and $modifier !=false {
    .cm-#{$component}__#{$element}--#{$modifier} {
      @content
    }
  }
  @if $element==false and $modifier !=false {
    .cm-#{$component}--#{$modifier} {
      @content
    }
  }
  @else if $element==false and $modifier==false {
    .cm-#{$component} {
      @content
    }
  }
}

//---------------------------
//  Detect retina screen
//---------------------------
@mixin isRetina {
  @media(-webkit-min-device-pixel-ratio: 1.25), (min-resolution: 120dpi) {
    @content
  }
  @media(-webkit-min-device-pixel-ratio: 1.3),
  (min-resolution: 124.8dpi) {
    @content
  }
  @media(-webkit-min-device-pixel-ratio: 1.5),
  (min-resolution: 144dpi) {
    @content
  }
}

//---------------------------
//  Placeholder
//---------------------------
@mixin placeholder {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

//---------------------------
//  String replace
//---------------------------
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

//---------------------------
//  Hide
//---------------------------
@mixin hide() {
  display: none !important;
  visibility: hidden;
}

//---------------------------
//  Unhide
//---------------------------
@mixin unhide($type) {
  display: $type !important;
  visibility: visible;
}

//---------------------------
//  Appearance
//---------------------------
@mixin appearance ($value) {
  -webkit-appearance: $value;
     -moz-appearance: $value;
          appearance: $value;
}

//---------------------------
//  Vertical center
//---------------------------
@mixin v-center($position) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

//---------------------------
//  Horizontal center
//---------------------------
@mixin h-center($position) {
  position: $position;
  left: 50%;
  transform: translateX(-50%);
}

//---------------------------
//  Vertical and horizontal
//  center
//---------------------------
@mixin vh-center($position) {
  position: $position;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

//---------------------------
// DIAGONAL HELPER
// Generate a diagonal edge on a before pseudo element
// $rotation: diagonal degree
// $background : background color, image, gradient
// $height: height of the edge ( px, %, cm, pc, etc)
// @content [Write the style you want to apply to the diagonal edge, and it will be added within the @content directive]
//---------------------------
@mixin diagonal($rotation, $background, $height, $imp: false, $pos: after) {
  &:#{$pos} {
    content: '';
    display: block;
    position: absolute;
    width: 100%;
    height: $height;
    background: #{$background};
    @if $imp == 'true' {
      transform: skewY($rotation) !important;
    }
    @else {
      transform: skewY($rotation);
    }
    @content;
  }
}

//---------------------------
//
// Force important
//
// Cuz sometimes, important is
// all you need
//
//---------------------------
@function _($rule) {
  @return $rule !important
}